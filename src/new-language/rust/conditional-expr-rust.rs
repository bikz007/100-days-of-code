/*
Use an if statement if:

It is desired to test the truthiness of an expression
There is a single affirmative test
There is a need to evaluate different expressions for each branch
It can test expressions based on ranges of values or conditions

Use a match statement if:

It is desired to compare multiple possible conditions of an expression
The values belong to the same domain
It can test expressions based on values only, i.e., condition cannot take ranges

Use an if let statement if:

There is a pattern in the condition and it is to be matched with the scrutinee expression
*/
fn example_1() {
    //define a variable
    let learn_language = "Rust";
    // if construct
    if learn_language == "Rust" {
        println!("You are learning Rust language!");
    }
}

fn example_2() {
    //define a variable
    let learn_language = "Rust";
    // if else construct
    if learn_language == "Python" {
        println!("You are learning Rust language!");
    } else {
        println!("You are learning some other language!");
    }
}

fn example_3() {
    //define a variable
    let learn_language = "Java";
    // if..elseif..else construct
    if learn_language == "Rust" {
        println!("You are learning Rust language!");
    } else if learn_language == "Java" {
        println!("You are learning Java language!");
    } else {
        println!("You are learning some other language!");
    }
}

fn example_4() {
    //define a variable
    let learn_language1 = "Rust";
    let learn_language2 = "Java";
    // outer if statement
    if learn_language1 == "Rust" {
        // inner if statement
        if learn_language2 == "Java" {
            println!("You are learning Rust and Java language!");
        }
    } else {
        println!("You are learning some other language!");
    }
}

fn example_5() {
    //define a variable
    let learn_language = "Rust";
    // short hand construct
    let res = if learn_language == "Rust" {
        "You are learning Rust language!"
    } else {
        "You are learning some other language!"
    };
    println!("{}", res);
}

fn example_6() {
    // Note: When it says matching of pattern, it means that the defined pattern has the same number of values as that of the scrutinee expression.
    // define a scrutinee expression
    let course = ("Rust", "beginner", "course");
    // pattern matches with the scrutinee expression
    if let ("Rust", "beginner", "course") = course {
        println!("Wrote all values in pattern to be matched with the scrutinee expression");
    } else {
        // do not execute this block
        println!("Value unmatched");
    }
    // If the first value or second value matches, it can guess the third value.
}

fn example_7() {
    // define a scrutinee expression
    let course = ("Rust", "beginner", "course");
    // pattern matches with the scrutinee expression
    if let ("Rust", "beginner", c) = course {
        println!(
            "Wrote first two values in pattern to be matched with the scrutinee expression : {}",
            c
        );
    } else {
        // do not execute this block
        println!("Value unmatched");
    }
}

fn example_8() {
    // define a scrutinee expression
    let course = ("Rust", "beginner", "course");
    // pattern matches with the scrutinee expression
    if let ("Rust", c, d) = course {
        println!("Wrote one value in pattern to be matched with the scrutinee expression.Guessed values: {}, {}",c,d);
    } else {
        // do not execute this block
        println!("Value unmatched");
    }
}

fn example_9() {
    // define a scrutinee expression
    let course = ("Rust", "beginner");
    // pattern does not match with the scrutinee expression
    if let ("Java", c) = course {
        println!("Course is {}", c);
    } else {
        // execute this block
        println!("Value unmatched");
    }
}

fn example_10() {
    // no pattern is define
    // Note: A warning, ⚠️, is generated by the compiler because the Rust compiler complains that it doesn’t make sense to use if let with an irrefutable pattern.
    if let _ = 101 {
        println!("irrefutable if-let pattern is always executed");
    }
}

fn example_11() {
    // define a variable
    let x = 5;
    // define match expression
    match x {
        1 => println!("Java"),
        2 => println!("Python"),
        3 => println!("C++"),
        4 => println!("C#"),
        5 => println!("Rust"),
        6 => println!("Kotlin"),
        _ => println!("Some other value"),
    };
}

fn example_12() {
    // define a variable
    let course = "Rust";
    // return value of match expression in a variable
    let found_course = match course {
        "Rust" => "Rust",
        "Java" => "Java",
        "C++" => "C Plus Plus",
        "C#" => "C Sharp",
        _ => "Unknown Language",
    };
    println!("Course name : {}", found_course);
}

fn main() {
    example_1();
    example_2();
    example_3();
    example_4();
    example_5();
    example_6();
    example_7();
    example_8();
    example_9();
    example_10();
    example_11();
    example_12();
}
